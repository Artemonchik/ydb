name: Regression-whitelist-run

on:
  schedule:
    - cron: "0 23 * * *"  # Every day at 23:00
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run the workflow on (leave blank to run default branches)'
        required: false
        default: '' # Empty by default

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      branches: ${{ steps.set-branches.outputs.branches }}
    env:
      DEFAULT_BRANCHES_JSON: '[\"main\", \"stable-25-1-1\"]'
    steps:
      - name: Determine branches
        id: set-branches
        run: |
          if [ "${{ github.event.inputs.branch }}" != "" ]; then
            echo "Using input branch: ['${{ github.event.inputs.branch }}']"
            branches="['${{ github.event.inputs.branch }}']"
          else
            echo "Using default branches: $DEFAULT_BRANCHES_JSON"
            branches="${{ env.DEFAULT_BRANCHES_JSON }}"
          fi
          echo "branches=$branches" >> $GITHUB_OUTPUT


  build:
    name: TEST ${{ matrix.build_preset }} on ${{ matrix.branch }}
    needs: prepare
    runs-on: [self-hosted, "${{ inputs.runner_label || 'auto-provisioned' }}", "${{ format('build-preset-{0}', inputs.build_preset || 'relwithdebinfo') }}"]
    timeout-minutes: 600
    env:
      BUILD_TARGETS_JSON: '["ydb/tests/sql/", "ydb/tests/stress", "ydb/tests/functional/tpc", "ydb/tests/functional/benchmarks_init"]'
      TEST_SIZE: small,medium,large
      TEST_TYPE: unittest,py3test,py2test,pytest

    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJson(needs.prepare.outputs.branches) }}
        build_preset: [relwithdebinfo, release-asan, release-msan, release-tsan] # list of build presets to run

        include:
          - build_preset: relwithdebinfo
            threads_count: 52
            timeout: 300
            test_size: $TEST_SIZE
            test_type: $TEST_TYPE
          - build_preset: release-asan
            threads_count: 20
            timeout: 480
            test_size: $TEST_SIZE
            test_type: $TEST_TYPE
          - build_preset: release-msan
            threads_count: 20
            timeout: 480
            test_size: $TEST_SIZE
            test_type: $TEST_TYPE
          - build_preset: release-tsan
            threads_count: 10
            timeout: 600
            test_size: $TEST_SIZE
            test_type: $TEST_TYPE

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch }}

      - name: Setup ssh key for slice
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SLICE_QA_SSH_PRIVATE_KEY }}

      - name: Setup ydb access
        uses: ./.github/actions/setup_ci_ydb_service_account_key_file_credentials
        with:
          ci_ydb_service_account_key_file_credentials: ${{ secrets.CI_YDB_SERVICE_ACCOUNT_KEY_FILE_CREDENTIALS }}

      - name: Convert JSON to build target string
        id: setup_build_target
        run: |
          BUILD_TARGETS=$(echo $BUILD_TARGETS_JSON | jq -r '. | join(" ")')
          echo "BUILD_TARGET=$BUILD_TARGETS" >> $GITHUB_ENV

      - name: Build and test
        timeout-minutes: ${{ matrix.timeout }}
        uses: ./.github/actions/build_and_test_ya
        with:
          build_preset: ${{ matrix.build_preset }}
          increment: false
          build_target: ${{ env.BUILD_TARGET }}
          run_build: true
          run_tests: true
          test_retry_count: 3
          test_size: ${{ matrix.test_size }}
          test_type: ${{ matrix.test_type }}
          test_threads: ${{ matrix.threads_count }}
          put_build_results_to_cache: false
          additional_ya_make_args: -DDEBUGINFO_LINES_ONLY  # we don't need full symbols in CI checks
          secs: ${{ format('{{"TESTMO_TOKEN2":"{0}","AWS_KEY_ID":"{1}","AWS_KEY_VALUE":"{2}","REMOTE_CACHE_USERNAME":"{3}","REMOTE_CACHE_PASSWORD":"{4}"}}',
            secrets.TESTMO_TOKEN2, secrets.AWS_KEY_ID, secrets.AWS_KEY_VALUE, secrets.REMOTE_CACHE_USERNAME, secrets.REMOTE_CACHE_PASSWORD) }}
          vars: ${{ format('{{"AWS_BUCKET":"{0}","AWS_ENDPOINT":"{1}","REMOTE_CACHE_URL":"{2}","TESTMO_URL":"{3}","TESTMO_PROJECT_ID":"{4}"}}',
            vars.AWS_BUCKET, vars.AWS_ENDPOINT, vars.REMOTE_CACHE_URL_YA, vars.TESTMO_URL, vars.TESTMO_PROJECT_ID) }}