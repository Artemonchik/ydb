name: Update Muted YA

on:
  workflow_dispatch:

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  create-or-update-muted-ya:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          persist-credentials: false

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ydb[yc] PyGithub

      - name: Setup ydb access
        uses: ./.github/actions/setup_ci_ydb_service_account_key_file_credentials
        with:
          ci_ydb_service_account_key_file_credentials: ${{ secrets.CI_YDB_SERVICE_ACCOUNT_KEY_FILE_CREDENTIALS }}
          
      - name: Update branch with main
        run: |
          git config user.name YDBot
          git config user.email ydbot@ydb.tech 
          git checkout main
          git pull --rebase origin main
          git fetch origin create-muted-ya || true
          if [ -n "$(git branch -a | grep remotes/origin/create-muted-ya)" ]; then
            git checkout create-muted-ya
            git rebase main
          else
            git checkout -b create-muted-ya
          fi

      - name: Run the script
        run: |
          .github/scripts/tests/create_new_muted_ya.py update_muted_ya

      - name: Move new_muted_ya_with_flaky.txt to muted_ya.txt
        run: |
          cp mute_update/new_muted_ya_with_flaky.txt .github/config/muted_ya.txt

      - name: Check if changes exist
        id: changes_check
        run: |
          if git diff --quiet .github/config/muted_ya.txt; then
            echo "No changes detected in muted_ya.txt"
            echo "changes=false" >> $GITHUB_ENV
          else
            echo "Changes detected in muted_ya.txt"
            echo "changes=true" >> $GITHUB_ENV
          fi

      - name: Collect PR description
        id: pr_description
        run: |
          PR_BODY=''
          if [ -s mute_update/deleted_tests_in_mute_debug.txt ]; then
              DELETED_COUNT=$(wc -l < mute_update/deleted_tests_in_mute_debug.txt)
              PR_BODY+=$'Removed from mute: '"${DELETED_COUNT}"$'\n\n'"$(cat mute_update/deleted_tests_in_mute_debug.txt)"$'\n\n'
          fi
          if [ -s mute_update/flaky_debug.txt ]; then
              FLAKY_COUNT=$(wc -l < mute_update/flaky_debug.txt)
              PR_BODY+=$'Muted flaky: '"${FLAKY_COUNT}"$'\n\n'"$(cat mute_update/flaky_debug.txt)"$'\n\n'
          fi
          if [ -s mute_update/muted_stable_debug.txt ]; then
              MUTED_STABLE_COUNT=$(wc -l < mute_update/muted_stable_debug.txt)
              PR_BODY+=$'Unmuted stable: '"${MUTED_STABLE_COUNT}"$'\n\n'"$(cat mute_update/muted_stable_debug.txt)"$'\n\n'
          fi

          # Use printf to handle special characters and newlines
          printf "PR_BODY<<EOF\n%s\nEOF\n" "$PR_BODY" >> $GITHUB_ENV

      - name: Stage changes if any
        if: env.changes == 'true'
        run: |
          git add .github/config/muted_ya.txt

      - name: Delete other files
        run: |
          rm -rf mute_update

      - name: Commit changes
        if: env.changes == 'true'
        run: |
          git commit -m "Update muted YA file"

      - name: Push changes
        if: env.changes == 'true'
        uses: ad-m/github-push-action@v0.8.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: create-muted-ya
          force: true

      - name: Install PyGithub
        run: |
          pip install PyGithub

      - name: Create or update PR
        id: create_or_update_pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: create-muted-ya
          TITLE: "Update muted_ya.txt"
          BODY: ${{ env.PR_BODY }}
        run: |
          import os
          from github import Github

          g = Github(os.getenv('GITHUB_TOKEN'))
          repo = g.get_repo(os.getenv('GITHUB_REPOSITORY'))

          # Check for an existing PR
          existing_prs = repo.get_pulls(head=BRANCH, base='main', state='open')
          existing_pr = None
          for pr in existing_prs:
              if pr.title == TITLE:
                  existing_pr = pr
                  break

          if existing_pr:
              print(f"Existing PR found. Updating PR #{existing_pr.number}.")
              # Update existing PR
              existing_pr.edit(title=TITLE, body=BODY)
          else:
              print("No existing PR found. Creating a new PR.")
              # Create new PR
              repo.create_pull(title=TITLE, body=BODY, head=BRANCH, base='main')
